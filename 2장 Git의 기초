
- Git을 사용하는 방법을 알고 싶은데 한 개 장 밖에 읽을 시간이 없다면,
  이번 장을 읽어야 함
-> Git에서 자주 사용하는 명령어는 모두 2장에 등장함(6/15)

- 2장을 다 읽으면 저장소를 만들고 설정하는 방법, 파일을 추적하거나(Track), 
  추적을 그만두는 방법, 변경 내용을 Stage하고 커밋하는 방법을 알게됨 

- 파일이나 파일 패턴을 무시하도록 Git을 설정하는 방법, 
  실수를 쉽고 빠르게 만회하는 방법,
  프로젝트 히스토리를 조회하고 커밋을 비교하는 방법,
  리모트 저장소에 Push하고 Pull하는 방법을 살펴봄(6/15) 
  


## 2.1 Git 저장소 만들기

- Git 저장소를 만드는 방법은 두 가지임
-> 기존 프로젝트나 디렉터리를 Git 저장소로 만드는 방법이 있고,
   다른 서버에 있는 저장소를 Clone하는 방법이 있음(6/15) 
   

### 기존 디렉터리를 Git 저장소로 만들기

- 기존 프로젝트를 Git으로 관리하고 싶을 때,
  프로젝트의 디렉터리로 이동해서 아래와 같은 명령을 실행함
  
  git init
  
- 이 명령은 .git이라는 하위 디렉터리를 만듦
-> .git 디렉터리에는 저장소에 필요한 뼈대 파일(skeleton)이 들어 있음
-> 이 명령만으로는 아직 프로젝트의 어떤 파일도 관리하지 않음
   (.git 디렉터리가 막 만들어진 직후 정확히 어떤 파일이 담겨 있는지는 10장 "git의 내부"에서 나옴)

- Git이 파일을 관리하게 하려면 저장소에 파일을 추가하고 커밋해야 함
-> git add 명령으로 파일을 추가하고 git commit 명령으로 커밋함 (6/15) 

  git add *.c
  git add LICENSE
  git commit -m 'initial project version'
  
-> 명령어 몇 개로 순식간에 Git 저장소를 만들고 파일 버전 관리를 시작함 (6/15) 


### 기존 저장소를 Clone하기

- 다른 프로젝트에 참여하려거나 Git 저장소를 복사하고 싶을 때는 git clone 명령을 사용함
-> Git이 Subversion과 다른 가장 큰 차이점은 서버에 있는 거의 모든 데이터를 복사한다는 것임
-> git clone을 실행하면 프로젝트 히스토리를 전부 받아옴
-> 실제로 서버의 디스크가 망가져도 클라이언트 저장소 중에서 아무거나 하나 가져다가 복구하면 됨

- git clone [url] 명령으로 저장소를 Clone함
-> liggit2 라이브러리 소스 코드를 Clone 하려면 아래와 같이 실행함

  git clone https://github.com/libgit2/libgit2
    
- 이 명령은 "libgit2"이라는 디렉터리를 만들고 그 안에 .git 디렉터리를 만듦
-> 그리고 저장소의 데이터를 모두 가져와서 자동으로 가장 최신 버전을 Checkout해 놓음
-> libgit2 디렉터리로 이동하면 Checkout으로 생성한 파일을 볼 수 있고,
   당장 하고자 하는 일을 시작할 수 있음
-> 아래와 같은 명령을 사용하여 저장소를 Clone하면 "libgit2"이 아니라 다른 디렉터리 이름으로 Clone할 수 있음

  git clone https://github.com/libgit2/libgit2 mylibgit
  
- 디렉터리 이름이 mylibgit이라는 것만 빼면 이 명령의 결과와 앞선 명령의 결과는 같음(6/15) 

- Git은 다양한 프로토콜을 지원함
-> 이제까지는 https:// 프로토콜을 사용했지만 git://을 사용할 수도 있고,
   SSH 프로토콜을 사용할 수도 있음(6/15)
   

### 수정하고 저장소에 저장하기

- 만질 수 있는 Git 저장소를 하나 만들었고 워킹 디렉터리에 Checkout도 했음
-> 이제는 파일을 수정하고 파일의 스냅샷을 커밋해봄
-> 파일을 수정하다가 저장하고 싶으면 스냅샷을 커밋함(6/15)

- 워킹 디렉터리의 모든 파일은 크게 Tracked(관리 대상)와 Untracked(관리대상이 아님)으로 나뉨
-> Tracked 파일은 이미 스냅샷에 포함돼 있던 파일임
-> Tracked 파일은 또 Unmodified(수정하지 않음)와 Modified(수정함) 그리고 Staged(커밋으로 저장소에 기록할) 상태 중 하나임
-> 그리고 나머지 파일은 모두 Untracked 파일임 (6/15) 

- Untracked 파일은 워킹 디렉터리에 있는 파일 중 스냅샷에도 Staging Area에도 포함되지 않은 파일임
-> 처음 저장소를 Clone하면 모든 파일은 Tracked이면서 Unmodified 상태임
-> 파일을 Checkout하고 나서 아무것도 수정하지 않았기 때문에 그러함(6/15)

- 마지막 커밋 이후 아직 아무것도 수정하지 않은 상태에서 어떤 파일을 수정하면 Git은 그 파일을 Modified 상태로 인식함
-> 실제로 커밋을 하기 위해서는 이 수정한 파일을 Staged 상태로 만들고, staged 상태의 파일을 커밋함
-> 이런 라이프사이클은 계속 반복됨(6/15)


### 파일의 상태 확인하기

- 파일의 상태를 확인하려면 보통 git status 명령을 사용함
-> Clone한 후에 바로 이 명령을 실행하면 다음과 같은 메시지를 볼 수 있음(6/15) 

  git status
  On brach master
  nothing to commit, working directory clean
  
- 위의 내용은 파일을 하나도 수정하지 않았다는 것을 말해줌
-> Tracked나 Modified 상태인 파일이 없다는 의미임
-> Untracked 파일은 아직 없어서 목록에 나타나지 않음

- 그리고 현재 작업 중인 브랜치를 알려주며 서버의 같은 브랜치로부터 진행된 작업이 없는 것을 나타냄(6/15)
-> 기본 브랜치가 master이기 때문에 현재 브랜치 이름이 master로 나옴
-> 브랜치 관련 내용은 차차 알아감 
-> 3장에서 브랜치와 Refs에 대해 자세히 다룸(6/15)

- 프로젝트에 README 파일을 만들어봄
-> README 파일은 새로 만든 파일이기 때문에 git status를 실행하면 'Untracked files'에 들어 있음

- README 파일은 Untracked files 부분에 속해 있는데 이것은 README 파일이 Untracked 상태라는 것을 말함
-> Git은 Untracked 파일을 아직 스냅샷(커밋)에 넣어지지 않은 파일이라고 봄
-> 파일이 Tracked 상태가 되기 전까지는 Git은 절대 그 파일을 커미하지 않음
-> 그래서 일하면서 생성하는 바이너리 파일 같은 것을 커밋하는 실수는 하지 않게 됨(6/15)
-> README 파일을 추가해서 직접 Tracked 상태로 만들어 봄(6/15) 



